/* SI 413 Fall 2018
 * Lab 7
 * Parser for SPL that just shows the parse tree
 * This parser uses a simpler grammar with assoc/prec specifications.
 * Brandon Sipes
 */

// This code is included in the spl.tab.hpp header file
%code requires {

#include <cstdlib>
#include <iostream>
using namespace std;

#include "ast.hpp"

int yylex();
int yylex_destroy();

} // end header file part

// This code is only included in the parser file spl.tab.cpp
%code {

// These are the colored output streams to make things all pretty.
colorout resout(1, 'u');
colorout errout(2, 'r');

// Global variable will be set to the entire AST.
Stmt* tree;

// Global variable to indicate if an error has occurred.
bool error;

// Global variable to indicate that terminal input is "live" and
// so prompts should be displayed.
bool showPrompt;

// This is the C file that flex reads from for scanning.
extern FILE* yyin;

void yyerror(const char *p) {
  if (! error) {
    errout << "Parser error: " << p << endl;
    error = true;
  }
}

} // end top of parser part

  /* Tell bison to give descriptive error mesages. */
%error-verbose

%union {
  Block* block;
  Stmt* stmt;
  Exp* exp;
  Id* id;
  Oper op;
};

%left<op> BOP
%right<op> NOTTOK
%left<op> COMP
%left<op> OPA
%left<op> OPM
%right POSNEG
%left FUNARG

%token LC RC LP RP LAMBDA IF IFELSE WHILE READ WRITE NEW ASN STOP
%token<id> ID
%token<exp> NUM BOOL 
%type<stmt> stmt stmtlist
%type<block> block
%type<exp> exp

%destructor { delete $$; } <block>
%destructor { delete $$; } <stmt>
%destructor { delete $$; } <exp>
%destructor { delete $$; } <id>

%%
  /*Note: YYACCEPT is a bison macro that just tells it to quit parsing.*/
res: stmt { tree = $1; YYACCEPT; }
|         { tree = nullptr; }

block: LC stmtlist RC { $$ = new Block($2); }

stmtlist: stmtlist stmt { $$ = Stmt::append($1,$2); }
|                       { $$ = new NullStmt; }

stmt: NEW ID ASN exp STOP    {$$ = new NewStmt($2,$4);}
|     exp FUNARG exp STOP     {$$ = new ExpStmt($1, $3);}
|     ID ASN exp STOP        {$$ = new Asn($1,$3);}
|     WRITE exp STOP         {$$ = new Write($2);}
|     IF exp block           {$$ = new IfStmt($2,$3,new NullStmt());}
|     IFELSE exp block block {$$ = new IfStmt($2,$3,$4);}
|     WHILE exp block        {$$ = new WhileStmt($2,$3);}
|     block                  {$$ = $1;}

exp: exp BOP exp          {$$ = new BoolOp($1,$2,$3);}
|    NOTTOK exp           {$$ = new NotOp($2);}
|    exp COMP exp         {$$ = new CompOp($1,$2,$3);}
|    exp OPA exp          {$$ = new ArithOp($1,$2,$3);}
|    exp OPM exp          {$$ = new ArithOp($1,$2,$3);}
|    OPA exp %prec POSNEG {$$ = ($1 == ADD ? $2 : new NegOp($2));}
|    READ                 {$$ = new Read();}
|    LAMBDA ID block      {$$ = new Lambda($2,$3);}
|    exp FUNARG exp       {$$ = new Funcall($1,$3);}
|    LP exp RP            {$$ = $2;}
|    ID                   {$$ = $1;}
|    NUM                  {$$ = $1;}
|    BOOL                 {$$ = $1;}

%%
int main(int argc, char** argv) {
  // 0, 1, and 2 correspond to stdin, stdout, and stderr respectively.
  showPrompt = isatty(0) && isatty(2);
  bool interactive = isatty(1) && isatty(2);

  // Frame symbol table
  Frame *ST = new Frame(nullptr);

  // this saves the entire program's AST to deallocate at the end
  vector<Stmt*> program;

  if (argc >= 2) {
    if (!(yyin = fopen(argv[1],"r"))) {
      cerr << "Could not open input file \"" << argv[1] << "\"!" << endl;
      exit(2);
    }
    interactive = false;
  }

  // loop to read in the program and execute it, one statement at a time
  while (true) {
    tree = nullptr;
    error = false;
    if (interactive) cerr << "spl> ";

    // This line actually runs the interpreter on the next statement.
    // Note that error is a global variable which may also be set to true
    // on other kinds of errors in execution.
    if (yyparse() != 0) error = true;

    if (!error) {
      // execute the next statement's AST if there was no error
      if (tree) tree->exec(ST);
      // otherwise we have the normal exit condition on EOF.
      else break;
    }

    // save the tree for later deallocation
    if (tree) program.push_back(tree);

    // quit immediately on error if it's a non-interactive run
    if (!interactive && error) break;
  }

  if (interactive) cerr << "Goodbye" << endl;

  // cleanup
  if (argc >= 2) fclose(yyin);
  for (Stmt* node : program) delete node;
  yylex_destroy();

  // exit 5 if the last statement resulted in an error
  if (error) return 5;
  else return 0;
}
