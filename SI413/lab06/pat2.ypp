/* SI 413 Fall 2018
 * Lab 6
 * Parser and interpreter for pat
 * Brandon Sipes
 */

%code requires {

#include <cstdlib>
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include "colorout.hpp"
using namespace std;

// This says that semantic values of tokens should be ParseTree pointers.
#define YYSTYPE vector<string>*

int yylex();
extern colorout resout;
extern colorout errout;
extern map<string, vector<string> > symTable;

}

%code {

// These helper functions provided at no cost by Dr Roche.

// Prints out a vector of strings with spaces in between
// You can call this just like resout << some_vector << endl;
ostream& operator<< (ostream& out, const vector<string>* vec) {
  if (vec->empty()) return out;
  out << (*vec)[0];
  for (unsigned long i=1; i<vec->size(); ++i)
    out << ' ' << (*vec)[i];
  return out;
}

// Computes the "fold" or interleaving of two vectors of strings
vector<string>* fold(const vector<string> *A, const vector<string> *B) {
  vector<string>* res = new vector<string>;
  unsigned long int i = 0;
  for (; i < A->size() && i < B->size(); ++i) {
    res->push_back((*A)[i]);
    res->push_back((*B)[i]);
  }
  for (; i < A->size(); ++i)
    res->push_back((*A)[i]);
  for (; i < B->size(); ++i)
    res->push_back((*B)[i]);
  return res;
}

// Concatenates two vectors of strings
vector<string>* concat(const vector<string> *A, const vector<string> *B) {
  vector<string>* res = new vector<string>;
  unsigned long int i;
  for(i = 0; i < A->size(); ++i) res->push_back((*A)[i]);
  for(i = 0; i < B->size(); ++i) res->push_back((*B)[i]);
  return res;
}

// Reverses a vector of strings
vector<string>* rev(const vector<string> *A) {
  vector<string>* res = new vector<string>;
  long int i;
  for(i = A->size() - 1; i >= 0; --i) res->push_back((*A)[i]);
  return res;
}

int yyerror(const char *p) {
  errout << "Parser error: " << p << endl;
  exit(1);
}

// These are the colored output streams to make things all pretty.
colorout resout(1, 'u');
colorout errout(2, 'r');

// Global variable to indicate to stop parsing.
bool done = false;

map<string, vector<string> > symTable;


}

  /* Tell bison to give descriptive error mesages. */
%error-verbose

//My grammar
%token STOP FOLD COLON REV SYM NAME LB RB

%right SYM
%right NAME
%left LB
%right CONCAT
%right COLON
%right REV
%left FOLD

%%

  /*Note: YYACCEPT is a bison macro that just tells it to quit parsing.*/
S: seq STOP              { resout << $1 << endl; YYACCEPT; }
|                        { done = true;; }


seq: seq FOLD seq        {$$ = (fold($1,$3));} //return the fold of them
|    seq COLON NAME      {$$ = $1; symTable[$3] = $1;} //return the sequence and add to the symTable
|    seq seq             {$$ = (concat($1,$2));} %prec CONCAT //concat and return them
|    seq REV             {$$ = (rev($1));} //return the reverse of the seq
|    NAME                {$$ = symTable[$1];} //return the saved string for the name
|    SYM                 {$$ = $1;} //return the symbol
|    LB seq RB           {$$ = $2;} //return the seq



%%
int main()
{
  // This checks whether the output is a terminal.
  bool tty = isatty(0) && isatty(1);

  while(true) {
    if (tty) cerr << "> ";
    yyparse();
    if (done) break;
  }
  if (tty) cerr << "Goodbye!" << endl;
  return 0;
}
